=title HTTP-запрос клиента в Node.js (GET-запрос и данные из POST-запроса)
=timestamp 2015-02-22T21:51:01
=indexes http, request, GET, POST
=status show
=books nodejs
=author szabgab
=translator name2rnd
=original http-client-request-in-nodejs
=archive 1
=comments_disqus_enable 0

=abstract start

При создании веб-приложения на чистом Node.js вы могли использовать класс <a href="http://nodejs.org/api/http.html">http</a>, 
как мы делали в <a href="/getting-started-with-nodejs">Начинаем с Node.js</a>.
Тогда мы использовали только объект <hl>response</hl>, но если нас интересует сам запрос, тогда нужно взглянуть на 
объект <hl>request</hl>, который мы получаем в функции обратного вызова (callback, колбек).

=abstract end

В этом простом примере <hl>http-сервера на Node.js</hl> выводятся некоторые значения из объекта запроса, который является
экземпляром класса <a href="http://nodejs.org/api/http.html#http_class_http_clientrequest">http.ClientRequest</a>.

<include file="examples/node/http_client_request.js">

Я запустил приведенный выше скрипт с помощью команды <hl>node examples/node/http_client_request.js</hl>, 
он вывел: <hl>Browse to http://127.0.0.1:8081</hl>, и я зашел по указанному адресу через мой обычный браузер.

И вот что было выведено в консоль:

<code>
GET
{ host: '127.0.0.1:8081',
  connection: 'keep-alive',
  'cache-control': 'max-age=0',
  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.94 Safari/537.36',
  'accept-encoding': 'gzip, deflate, sdch',
  'accept-language': 'en-US,en;q=0.8,he;q=0.6,ru;q=0.4' }
/
GET
{ host: '127.0.0.1:8081',
  connection: 'keep-alive',
  accept: '*/*',
  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.94 Safari/537.36',
  'accept-encoding': 'gzip, deflate, sdch',
  'accept-language': 'en-US,en;q=0.8,he;q=0.6,ru;q=0.4' }
/favicon.ico
</code>

Сначала это меня слегка смутило. Почему у меня два GET-запроса? Но потом я кое-что вспомнил и, присмотревшись, все понял.
Первый запрос действительно был к <hl>/</hl> (как вы сами можете увидеть - перед вторым GET-запросом), но затем браузер отправил
второй запрос к <hl>/favicon.ico</hl>. Это автоматический запрос браузера, отправленный в надежде, 
что он сможет поместить это маленькое изображение на вкладке, где я открыл страницу.

Я не хочу, чтобы в моем исследовании была лишная путаница, поэтому я перешел на команду <hl>curl</hl>, которая доступна в Linux/Unix.

Попробуем еще раз:

Я запустил сервер:

<code>
$ node examples/node/http_client_request.js 
Browse to http://127.0.0.1:8081
</code>

и открыл еще одно командное окно, где написал свой запрос:

<code>
$ curl http://127.0.0.1:8081/
</code>

Затем переключился на предыдущую консоль, чтобы посмотреть ответ:

<code>
GET
{ 'user-agent': 'curl/7.37.1',
  host: '127.0.0.1:8081',
  accept: '*/*' }
/
</code>

С этого момента я переключался туда-сюда между двумя консолями.

Второй запрос содержит путь к документу на сервере и параметр со значением:

<code>
$ curl http://127.0.0.1:8081/some/path?field=value
</code>

Вывод в консоль был таким же, как и в предыдущем примере, кроме последней строки, которая содержит <hl>url</hl>.

<code>
GET
{ 'user-agent': 'curl/7.37.1',
  host: '127.0.0.1:8081',
  accept: '*/*' }
/some/path?field=value
</code>

Последней попыткой стала отправка POST-запроса с некоторыми данными с помощью curl:

<code>
$ curl --data "field=value" http://127.0.0.1:8081/
</code>

вывод выглядел вот так:

<code>
POST
{ 'user-agent': 'curl/7.37.1',
  host: '127.0.0.1:8081',
  accept: '*/*',
  'content-length': '11',
  'content-type': 'application/x-www-form-urlencoded' }
/
</code>

Первая строка показывает, что это действительно был <hl>POST</hl> запрос, заголовок содержал дополнительные поля, 
но сами данные не отображались.

Конечно, данные должны быть прочитаны и обработаны другим способом.

<h2>Прием HTTP POST запросов в Node.js</h2>

<include file="examples/node/http_client_request_post.js">

Это еще одна область, где видна неблокирующая природа Node.js.
Вместо простого чтения данных из объекта запроса, мы добавляем функцию обратного вызова (callback) к событию <hl>data</hl> объекта <hl>request</hl>.
Она [функция] будет вызываться каждый раз, когда придет новая партия данных.
Конечно, если данные это всего лишь 11 символов, как в нашем случае, тогда это не очень интересно, 
но если вы отправляете большой объем данных, тогда нам важно их читать, не блокируя остальную часть сайта.

Теперь, когда у нас есть колбек, ожидающий данные, нам нужно отдать ответ тогда, когда все данные будут приняты.
Таким образом, мы добавили колбек для события <hl>end</hl> объекта <hl>request</hl>, и в нем мы выведем в консоль все данные, 
отправленные клиентом, затем завершим ответ, вызвав метод <hl>end</hl> объекта <hl>response</hl>

Давайте попробуем

<code>
$ node examples/node/http_client_request_post.js 
Browse to http://127.0.0.1:8081
</code>

Обычный GET-запрос:

<code>
$ curl http://127.0.0.1:8081/
</code>

отработал как раньше:

<code>
GET
{ 'user-agent': 'curl/7.37.1',
  host: '127.0.0.1:8081',
  accept: '*/*' }
/
</code>

GET-запрос с указанием документа и параметрами:

<code>
$ curl http://127.0.0.1:8081/some/path?field=value
</code>

результат:

<code>
GET
{ 'user-agent': 'curl/7.37.1',
  host: '127.0.0.1:8081',
  accept: '*/*' }
/some/path?field=value
</code>

И как ведет себя <hl>POST</hl>-запрос

<code>
$ curl --data "field=value" http://127.0.0.1:8081/
</code>

результат в консоли:

<code>
POST
{ 'user-agent': 'curl/7.37.1',
  host: '127.0.0.1:8081',
  accept: '*/*',
  'content-length': '11',
  'content-type': 'application/x-www-form-urlencoded' }
/
field=value
</code>

Таким образом, удалось получить данные, отправленные клиентом.
