=title Введение в Handlebars, шаблонизатор JavaScript
=timestamp 2015-04-18T10:07:01
=indexes Handlebars, compile, template
=status show
=books javascript, handlebars
=author szabgab
=original introduction-to-handlebars-javascript-templating-system
=translator name2rnd
=archive 1
=comments_disqus_enable 0

=abstract start

В статье про <a href="/input-output-in-plain-javascript">ввод и вывод в JavaScript</a>
вы видели проблему создания сниппетов HTML на лету для последующего добавления на страницу.

<a href="http://handlebarsjs.com/">Handlebars</a> это шаблонизатор для JavaScript, который помогает снизить
сложность создания таких страниц.

Давайте перепишем наш пример на использование Handlebars.

=abstract end

<h2>Версия на чистом JavaScript</h2>

Этот пример из статьи <a href="/input-output-in-plain-javascript">ввод и вывов в JavaScript</a>:

<try file="examples/js/pure_js_greating.html">

<h2>Переключение на Handlebars</h2>

Вот решение с использованием Handlebars:

<try file="examples/js/handlebars_greating.html">

Чтобы использовать Handlebars, нам нужно сначала загрузить библиотеку Handlebars. Мы можем использовать ее прямо с
<a href="https://cdnjs.com/">CDN JS</a>:

<code>
<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/3.0.1/handlebars.min.js"></script>
</code>

либо мы можем скачать этот файл к себе на сервер и загружать его оттуда.

Мы создаем сниппет HTML и расставляем плейсхолдеры в двойных фигурных скобках:

<code>
Hello <b>{{first_name}}</b> {{last_name}}
</code>

Мы можем описать шаблоны в HTML несколькими способами, но один из рекомендуемых способов
это включить его в блоке <hl>head</hl> HTML страницы внутри тегов <hl>script</hl> с уникальным <hl>id</hl>.
Таким образом мы легко можем описать несколько шаблонов. И намного понятнее, какой мы хотим видеть окончальтельную HTML страницу.

<code>
<script id="text-template" type="text/x-handlebars-template">
   Hello <b>{{first_name}}</b> {{last_name}}
</script>
</code>

Затем мы описываем JavaScript. В коде JavaScript мы заменяем нашу строку,
собирающую переменные и HTML, которая выглядит вот так:

<code>
var html = 'Hello <b>' + fname + '</b> ' + lname;
</code>

на новый код:

<code>
var source   = document.getElementById('text-template').innerHTML;
var template = Handlebars.compile(source);
var context = {first_name: fname, last_name: lname};
var html    = template(context);
</code>

Я знаю, что это выглядит сложнее, чем раньше, и в таком простом примере, где нам
нужно просто вставить содержимое двух переменных в простой сниппет HTML, это может быть
чрезмерно. Но когда ваше приложение будет расти, вы увидите, что сложность
решения на простом Javascript будет расти, в то же время сложность решения на Handlebar
останется примерно такой же.

Давайте пройдемся по тем 4 строкам.

В первой строке мы обращаемся к элементу с id <hl>text-template</hl>, где у нас лежит шаблон,
и, используя метод <hl>innerHTML</hl>, мы копируем содержимое элемента в переменную <hl>source</hl>.

Во второй строке мы компилируем шаблон и создаем объект Handlebars, используя метод <hl>Handlebars.compile()</hl>.
Вообще-то, метод <hl>compile</hl> возвращает функцию, которую мы вызовем позднее.

В третьей строке мы создаем ассоциативный массив с ключами, которые совпадают с плейсхолдерами в шаблоне. Значения этих ключей
заменят плейсхолдеры. В массиве находятся значения, которые мы получили из элементов <hl>input</hl>. 
Это просто обычный объект JavaScript. Ничего особенного.
(Вы можете называть это хэш, ассоциативный массив или словарь в зависимости от другого языка, с которым вы знакомы.)

И в конце мы говорим шаблону заменить плейсхолдеры предоставленными значениями и присвоить полученный результат переменной <hl>html</hl>.

После этого мы можем вернуться обратно к оставшемуся коду JavaScript, и добавить новый HTML в существующий DOM с помощью

<code>
document.getElementById('result').innerHTML = html;
</code>

Это были основы Handlebars. Если вы хотите узнать больше, ознакомьтесь с документацией на веб-сайте <a href="http://handlebarsjs.com/">Handlebars</a>

