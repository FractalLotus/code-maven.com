=title TODO в AngularJS
=timestamp 2016-02-28T19:02:01
=indexes ng-repeat, push, ng-click, $index
=status show
=books angularjs, javascript
=author szabgab
=original todo-in-angularjs
=translator name2rnd
=archive 1
=comments_disqus_enable 0

=abstract start

После примеров про <a href="/getting-started-with-angularjs">Hello world</a>, <a href="/angularjs-first-binding">Echo</a> и <a href="/calculator-in-angularjs">простой калькулятор</a>,
создание списка TODO - это один из ритуальных пассажей для вхождения в мир программирования на любом языке в любом окружении.
Давайте посмотрим, как реализовать TODO на AngularJS.

=abstract end

<h2>Простой список TODO</h2>

После загрузки <hl>angular.min.js</hl> мы создаем модуль AngularJS с именем <hl>todoApp</hl>
и контролллер <hl>todoController</hl>. Внутри контроллера мы создаем пустой массив <hl>tasks</hl>, где будет содержаться список todo.
Мы сделаем его атрибутом текущего <hl>$scope</hl>, чтобы иметь возможность доступа из HTML.

Мы также объявляем функцию <hl>add</hl> (тоже атрибут <hl>$scope</hl>),
которая получает значение <hl>title</hl> (Как мы позже увидим, это будет имя поля для ввода),
и добавляем его в список задач, используя <hl>push</hl>. Вот и весь JavaScript, который нам нужен для простого списка TODO.

В части HTML у нас есть элемент <hl>div</hl>, который определяет область AngularJS-приложения <hl>ng-app</hl> и AngularJS-контроллера <hl>ng-controller</hl>.

Внутри контролллера в HTML у нас есть две части. Первая часть это поле для ввода <hl>input</hl>,
связанное с атрибутом <hl>$scope.title</hl> с помощью <hl>ng-model</hl>, и кнопка, использующая
<hl>ng-click</hl> для вызова метода <hl>$scope.add</hl> при нажатии.

Вторая часть использует директиву <hl>ng-repeat</hl> для прохода по элементам массива <hl>$scope.tasks</hl> и показа их в виде списка.

<try file="examples/angular/todo1.html">

<h2>Активация поля ввода нажатием ENTER</h2>

Несколько обременительно нажимать кнопку для добавления каждого элемента.
Будет гораздо лучше, если мы сможем просто нажимать ENTER.
Чтобы это сделать, нам нужно обернуть элемент <hl>input</hl> в <hl>form</hl> и на форму добавить директиву <hl>ng-submit</hl>,
которая будет вызывать функцию <hl>$scope.add</hl>. А также для избежания повторного вызова функции <hl>$scope.add</hl>.

<code lang="html">
  <form ng-submit="add()">
  <input ng-model="title"><button>Add</button>
  </form>
</code>

<h2>Дублирующиеся значения в ng-repeat</h2>

Если вы попробовали пример выше, то могли заметить, что добавление того же элемента дважды приводит к падению приложения.
Причина в том, что директива <hl>ng-repeat</hl> расчитана на уникальные значения в массиве.
Я не уверен, что наличие одинаковых значений в списке TODO это хорошо, но сейчас я бы хотел позволить 
пользователю добавлять то же самое значение дважды.
Для этого мы можем указать <hl>ng-repeat</hl> использовать <hl>$index</hl> массива для перебора значений:

<code lang="html">
<li ng-repeat="t in tasks track by $index">{{ t }}</li>
</code>

<h2>Удаление элемента из списка TODO</h2>

Хотя для большинства из нас реальность такова, что TODO список всегда увеличивается, иногда удача нам сопутствует и дела выполняются. (Или они просто отменяются.)
Мы бы хотели иметь способ удалить элемент. Для этого мы собираемся добавить кнопку в конце каждого пункта,
которая будет удалять конкретный элемент из списка дел.

Добавить кнопку это просто:

<code lang="html">
<button ng-click="delete()">x</button>
</code>

Соответствующая кнопке функция <hl>delete</hl> заставила меня почесать голову, но в итоге я справился:

<code lang="javascript">
$scope.delete = function() {
    $scope.tasks.splice(this.$index, 1);
}
</code>

Когда вызывается функция <hl>delete</hl>, <hl>this</hl> содержит атрибут <hl>$index</hl>, который похоже указывает на индекс текущего элемента.
Мы можем использовать это для нахождения нужного элемента в массива <hl>tasks</hl>. Функция JavaScript <hl>splice</a> удалит один элемент из массива,
а список сразу же обновится на HTML-странице.

<try file="examples/angular/todo2.html">
