=title Hello World с модулем AngularJS и контроллером
=timestamp 2015-09-06T16:48:01
=indexes ng-app, ng-controller, angular.module, controller, $scope
=status show
=books angularjs, javascript
=author szabgab
=translator name2rnd
=original hello-world-with-angular-controller
=archive 1
=comments_disqus_enable 0

=abstract start

В статье про <a href="/getting-started-with-angularjs">начало работы с AngularJS</a> мы видели, как работают простые выражения,
затем мы создали нашу <a href="/angularjs-first-binding">первую связку</a>. В этот раз мы рассмотрим два примера,
используя модуль AngularJS и контроллеры.

=abstract end

<h2>Контроллер Hello World</h2>

<try file="examples/angular/hello_world_controller.html">

После загрузки <hl>angular.js</hl> мы добавили еще немного кода JavaScript.
Мы можем встроить это в HTML-файл, используя парный тег <hl>script</hl> или,
как рекомендовано и как мы делаем в этом примере, мы можем поместить этот код во внешний JavaScript файл.
Единственное требование - мы загружаем его <hl>после</hl> загрузки <hl>angular.js</hl>.

Код JavaScript выглядит так:

<include file="examples/angular/hello_world_controller.js">
Сначала мы создаем объект <hl>angular.module</hl>, а вслед за этим создаем <hl>controller</hl>.
<hl>Module</hl> принимает два параметра: первый это имя, которое мы выбрали для этого модуля.
Это может быть любая строка, но так как это имя приложения Angular, так что хорошо бы назвать это как-то с "App".

Мы собираемся использовать это имя в HTML файле как значение атрибута <hl>ng-app</hl>.
(Раньше мы не указывали имя для этого атрибута, поэтому использовалось приложение по умолчанию)

Второй параметр для <hl>module</hl> это список зависимостей. Сейчас мы оставим его пустым.

<hl>Controller</hl> также имеет два параметра. Первый - это его имя. Обычно это какое-нибудь слово,
оканчивающееся на "Controller". Второй параметр это функция, реализующая контроллер.
Она будет выполнена сразу как загрузится контроллер. Окружение передается в переменной <hl>$scope</hl>.
Модели и переменные, которые мы использовали ранее, это атрибуты этого объекта.
Теперь когда мы создали новый атрубут <hl>$scope.greeting</hl> и присвоили ему значение,
мы сможем получить доступ к нему из нашего HTML.

Чтобы подключиться к нашему модулю и контроллеру мы должны создать HTML элемент
с атрибутом <hl>ng-app</hl>, содержащим имя нашего модуля, и внутри этого элемента 
мы должны создать другой HTML элемент с атрибутом <hl>ng-controller<hl>, содержащим имя нашего контроллера.

Это две метки области, которой соответствует <hl>$scope</hl>.

Это был очень простой пример с фиксированным значением атрибута, который используется в выражении.

<h2>Контроллер Hello user</h2>

Давайте посмотрим на более сложный пример, в котором мы получаем введенное пользователем значение и обрабатываем
его в контроллере. Обработка будет очень простой, просто конкатенация с заданной строкой.

<include file="examples/angular/hello_user_controller.js">

В этом примере атрибут <hl>NameChange</hl>, который мы добавили в <hl>$scope</hl>, это функция,
и эта функция будет создавать значение для атрибута <hl>$scope.greeting</hl>, используя
значение из <hl>$scope.name</hl>.

HTML

<try file="examples/angular/hello_user_controller.html">

Атрибут <hl>ng-model="name"</hl> связывает введенные данные элемента с переменной <hl>$scope.name</hl>.

Атрибут <hl>ng-keyup="NameChange()"</hl> связывает событие <hl>keyup</hl> страницы HTML с функцией определенной в <hl>$scope.NameChange</hl>.
Это означает, что функция будет вызвана каждый раз, когда содержимое поля ввода будет меняться.

Два выражения в HTML коде <hl>{{name}}</hl> и <hl>{{greeting}}</hl> будут отображать содержимое <hl>$scope.name</hl> и <hl>$scope.greeting</hl> соответственно.

В результате, если мы напишем "Foo" в поле ввода, наша страница отобразит "Hello Foo" в теге <hl>h1</hl> и <hl>Foo</hl> в теге <hl>h2</hl>.

