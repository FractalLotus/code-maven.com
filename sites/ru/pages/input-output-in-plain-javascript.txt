=title Ввод и вывод в простом JavaScript
=timestamp 2015-04-18T09:13:01
=indexes getElementById, value, addEventListener
=status show
=books javascript
=author szabgab
=original input-output-in-plain-javascript
=translator name2rnd
=archive 1
=comments_disqus_enable 0

=abstract start

В первой статье мы посмотрели <a href="/javascript-hello-world-change-the-dom">как изменить DOM, чтобы показать чего-нибудь</a>,
а затем мы посмотрели как <a href="/handling-events-in-javascript">обрабатывать события пользователя</a>. В этот раз мы собираемся 
рассмотреть, как получить одни данные, введенные пользователем, и соединить их другими, чтобы сделать простую страницу, приветствующую вас.

=abstract end

<try file="examples/js/pure_js_greating.html">

В этом примере у нас немного больше HTML, чем раньше. Кроме <hl>button</h> и <hl>div</hl>, где мы будем показывать наши результаты,
у нас также есть два элемента <hl>input</hl>. Каждый со своим ID.

Если вы нажмете на ссылку Try, то увидите два поля для ввода и кнопку:

<img src="/img/input_form.png" alt="Input form" />

В коде JavaScript у нас есть функция <hl>say_hi</hl>. Она использует метод <hl>getElementById</hl>, который мы рассмотрели ранее,
чтобы получить DOM элемент, представляющий input с id <hl>first_name</hl>. Возвращенный объект имеет метод <hl>value</hl>,
который вернет текст, введенный пользователем в это поле.

Мы применяем этот способ для получения содержимого обоих элементов <hl>input</hl> и присваиваем полученные значения двум переменным:
<hl>fname</hl> и <hl>lname</hl>.

Затем, используя эти переменные, мы создаем HTML-сниппет и присваиваем его новой переменной <hl>html</hl>.

Потом мы устанавливаем атрибут <hl>innerHTML</hl> (как мы делали это <a href="/javascript-hello-world-change-the-dom">ранее</a>)
чтобы показать сгенерированный HTML. Результат может выглядеть вот так:

<img src="/img/input_form_and_output.png" alt="Input form and output" />

<h2>Громоздкое создание HTML</h2>

Даже в таком простом HTML мы должны использовать <hl>+</hl> несколько раз, и код получается достаточно нечитаемый.
Представьте, что бы произошло, если бы мы захотели создать более сложное приложение, где мы бы хотели генерировать списки элементов
или даже таблицы. Генерация HTML на лету и вставка его в DOM была бы довольно неприятной.

В бекенде, написанном на Perl, Python или Ruby, люди сталкивались с теми же самыми проблемами. Решением было создание
различных шаблонизаторов. В принципе, шаблон это HTML сниппет с некоторыми плейсхолдерами (ключевыми словами), 
некая функция получает этот HTML сниппет (шаблон) в качестве параметра, а также несколько пар ключ-значение.
Затем функция возвращает новый HTML сниппет, в котором плейсхолдеры заменены полученными значениями подходящих ключей.

Точно так же и в Javascript есть много шаблонизаторов. Мы собираемся посмотреть на 
<a href="/introduction-to-handlebars-javascript-templating-system">HandlebarsJS, шаблонизатор JavaScript</a>.

