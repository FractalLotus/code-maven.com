=title Автоматический счетчик на AngularJS
=timestamp 2015-10-25T18:25:01
=indexes $timeout, ng-click
=status show
=books angularjs, javascript
=original automatic-counter-using-angularjs
=translator name2rnd
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

Мы видели <a href="/simple-in-memory-counter-with-angularjs">как создать счетчик на AngularJS</a>, который
мы увеличивали или уменьшали с помощью нажатий на кнопку. В этом примере мы будем автоматически
увеличивать счетчик с течением времени.

Не забудьте ознакомиться с другими <a href="https://code-maven.com/counter">примерами счетчиков</a>!

=abstract end

<h2>Планирование будущего выполнения, используя $timeout</h2>

<try file="examples/angular/automatic_counter.html">

В этом примере функция контроллера ожидает два параметра. <hl>$scope</hl> - содержит атрибуты, с которыми
мы взаимодействуем в нашем HTML, и <hl>$timeout</hl> - это функция, похожая на <hl>setTimeout</hl> из обычного Javascript.
(На самом деле это называется <b>внедрение зависимости</b>, а не параметры, но пока не будем беспокоиться об этом.
Особенно, пока я сам этого не понимаю.)

<hl>$timeout</hl> это функция, которая принимает два параметра: функцию обратного вызова (коллбек) и время,
определенное в милисекундах.
Она откладывает выполнение полученной функции до истечения заданного времени. Если передать 1000 в качестве
второго параметра, мы отложим выполнение переданной функции на 1 секунду после того, 
как собственно вызовем саму эту функцию.

Внутри функции контроллера первое что мы делаем, это создаем атрибут <hl>counter</hl> и
устанавливаем ему значение по умолчанию 0. Мы хотим, чтобы отчет начинался с 0.

Затем мы создаем функцию <hl>updateCounter</hl>, которая при вызове будет увеличивать <hl>counter</hl> и использовать <hl>$timeout</hl>,
чтобы вызвать себя же спустя 1 секунду. Это значит, что каждый раз при вызове функции <hl>updateCounter</hl> она увеличит
счетчик и запланирует в системе повторный вызов через 1 секунду. Это значит, функция будет запускаться каждую секунду.

Затем последний шаг это первый вызов <hl>updateCounter</hl> для запуска бесконечного цикла.

<h2>Счетчик с кнопкой Стоп</h2>

Этот счетчик будет увеличиваться каждую секунду, но что если мы захотим остановить его?
Мы увидим пример с дополнительной кнопкой, которая остановит счетчик.

<hl>$timeout</hl> возвращает объект <hl>promise</hl>, который мы можем использовать позднее, чтобы отключить таймер.
Чтобы сделать <hl>promise</hl> доступным, когда нам будет нужно, я создал переменную <hl>timer</hl>
и присвоил ей то, что вернула функция <hl>$timeout</hl>.
(Конечно, я мог бы использовать здесь любое другое имя.)

Затем я добавил кнопку в HTML и указал в атрибуте <hl>ng-click</hl> вызов метода <hl>stopCounter</hl>.

Осталось сделать только метод <hl>stopCounter</hl>.

Для начала я создал его, используя <hl>var stopCounter = function() { ... }</hl>
как и <hl>updateCounter</hl>, но это не сработало. Так как мы хотим вызывать метод из HTML,
нам нужно добавить этот метод в <hl>$scope</hl>. Следовательно, я должен был заменить
определение на:
<hl>$scope.stopCounter = function() { ... }</hl>.

Внутри у нас есть выражение <hl>$timeout.cancel(timer);</hl>, которое отменит работу таймера. Попробуйте!

<try file="examples/angular/automatic_counter_with_stop.html">

<h2>Счетчик с кнопками запуска и остановки</h2>

Еще одна штука, которую я хочу показать, это как я добавил еще одну кнопку для запуска счетчика дальше.

Первая версия была простой. Я просто добавил кнопку и новую функцию:

<code lang="javascript">
$scope.startCounter = function() {
    updateCounter();
};
</code>

Проблема такого решения в том, что оно позволяло мне нажать несколько раз на кнопку старта,
и счетчик начинал увеличиваться слишком быстро, перескакивая иногда на 2 или 3 шага.
В реальности происходило вот что: каждый раз, когда я нажимал на кнопку <hl>start</hl>, запускался
новый таймер и несколько таймеров работало параллельно.

Я должен был как-то убедиться, что в одно время работает только один таймер. Либо заблокировать 
кнопку <hl>start</hl> после нажатия, либо проверять, что таймер уже запущен, и запускать новый только если это не так.

Я выбрал это решение, так как был больше заинтересован в решении на JavaScript/AngularJS.
Я сделал два изменения. В функции <hl>stopCounter</hl> я добавил

<code lang="javascript">
timer = null;
</code>

В конце концов все что у нас есть, это отмененный таймер, и нет смысла держать неиспользуемые объекты.

Затем в методе <hl>startCounter</hl> я смог проверить, является ли <hl>timer</hl> <hl>null</hl> или нет,
и создать новый объект $timeout, если таймер отсутствует.

<try file="examples/angular/automatic_counter_with_stop_start.html">
