=title Содержимое директории на Node.js
=timestamp 2015-03-28T17:47:01
=indexes fs.stat
=status show
=books nodejs
=author szabgab
=original list-content-of-directory-with-nodejs
=translator name2rnd
=archive 1
=comments_disqus_enable 0

=abstract start

По аналогии с командой <hl>dir</hl> в MS Windows (а точнее в DOS) или с командой <hl>ls</hl> в Unix/Linux, мы напишем скрипт на Node.js,
реализующий такое же поведение. Он будет получать имя директории и возвращать содержимое директории с некоторой информацией о каждом элементе
в этой директории.

=abstract end

Мы уже знаем <a href="/system-information-about-a-file-or-directory-in-nodejs">как получить информацию о файле или директории из inode</a>, 
таким образом, мы можем просто вызвать <a href="http://nodejs.org/api/fs.html#fs_fs_stat_path_callback">fs.stat</a> для каждого элемента
в директории.

Этот скрипт получает путь к директории в командной строке (обязательный параметр),
а затем перечисляет содержимое этой директории (без рекурсии).

<include file="examples/node/read_dir.js">

Если вы читали статью о <a href="/system-information-about-a-file-or-directory-in-nodejs">получении системной информации об одном файле</a>,
тогда вам уже известна первая часть нашего скрипта.
А вот новая интересная часть:

<code lang="javascript">
fs.readdir(path, function(err, items) {
    console.log(items);

    for (var i=0; i<items.length; i++) {
        console.log(items[i]);
    }
});
</code>

Здесь мы используем метод <a href="http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback">readdir</a> класса <a href="http://nodejs.org/api/fs.html">fs</a>,
который получает путь и функцию-коллбек в качестве параметров.
Метод читает содержимое директории в память, а когда чтение завершено, то вызывает коллбек с двумя параметрами.

Если произошла какая-то ошибка, тогда первый параметр будет содержать информацию об этом. Если все прошло хорошо, тогда второй параметр будет
содержать массив со всеми найденными в директории элементами (файлы, директории, символьный ссылки и т.д.).

С этого момента внутри нашей функции-коллбека мы можем просто напечатать весь массив, если мы просто хотим убедиться в успешном выполнении,
или пройти циклом по массиву с помощью оператора <hl>for</hl> и сделать что-нибудь с каждым элементом. К примеру, мы можем напечатать каждый элемент.

Список будет содержать все кроме <hl>.</hl> (указывает на текущую директорию) и <hl>..</hl> (представляет собой родительскую директорию).

Вот как это выглядит:

<code>
$ node examples/node/read_dir.js ~/work/code-maven.com/examples/

[ 'blocking-read-file.js',
  'node_hello_world.js',
  'node_hello_world_port.js',
  'non-blocking-read-file.js',
  'process_exit.js',
  'raw_command_line_arguments.js',
  'read_dir.js',
  'stats.js' ]
blocking-read-file.js
node_hello_world.js
node_hello_world_port.js
non-blocking-read-file.js
process_exit.js
raw_command_line_arguments.js
read_dir.js
stats.js
</code>

<h2>Подробная информаци о каждом элементе</h2>

Теперь, когда мы знаем, как получить содержимое директории, и как <a href="/system-information-about-a-file-or-directory-in-nodejs">получить информацию о файле</a>,
мы можем соединить эти две процедуры.

<include file="examples/node/list_dir_direct.js">

Код достаточно прост и понятен. И он также содержит ошибки, как мы увидим чуть позже.

Внутри коллбека для метода <hl>readdir</hl> у нас есть цикл <hl>for</hl>.
В этом цикле в каждой итерации мы выводим имя текущего файла (после добавления полного пути директории) - в основном для отладочных целей -
и вызываем <hl>fs.stat</hl>. Этот метод в свою очередь тоже принимает коллбек. Там мы выводим имя файла - в этот раз, как часть результата,
и затем выводим размер файла. Мы могли бы вывести все данные о файле как мы это делали в 
<a href="/system-information-about-a-file-or-directory-in-nodejs">другой статье</a>, но сейчас размера достаточно.

Вывод в консоль:

<code>
$ node examples/node/list_dir_direct.js ~/work/code-maven.com/examples/

Start: /home/gabor/work/code-maven.com/examples//blocking-read-file.js
Start: /home/gabor/work/code-maven.com/examples//node_hello_world.js
Start: /home/gabor/work/code-maven.com/examples//node_hello_world_port.js
Start: /home/gabor/work/code-maven.com/examples//non-blocking-read-file.js
Start: /home/gabor/work/code-maven.com/examples//process_exit.js
Start: /home/gabor/work/code-maven.com/examples//raw_command_line_arguments.js
Start: /home/gabor/work/code-maven.com/examples//read_dir.js
Start: /home/gabor/work/code-maven.com/examples//stats.js

/home/gabor/work/code-maven.com/examples//stats.js
97
/home/gabor/work/code-maven.com/examples//stats.js
243
/home/gabor/work/code-maven.com/examples//stats.js
270
/home/gabor/work/code-maven.com/examples//stats.js
151
/home/gabor/work/code-maven.com/examples//stats.js
18
/home/gabor/work/code-maven.com/examples//stats.js
324
/home/gabor/work/code-maven.com/examples//stats.js
27
/home/gabor/work/code-maven.com/examples//stats.js
1382
</code>

Отладочный вывод напечатал имена как и ожидалось, но внутри коллбека функции <hl>fs.stat()</hl> мы снова печатаем одно и тоже имя файла.
Сравните результаты:

<code>
$ ls -l ~/work/code-maven.com/examples/
total 64
-rw-r--r--  1 gabor  staff    97 Jan 29 14:26 blocking-read-file.js
-rw-r--r--  1 gabor  staff   243 Jan 27 12:34 node_hello_world.js
-rw-r--r--  1 gabor  staff   270 Jan 27 12:34 node_hello_world_port.js
-rw-r--r--  1 gabor  staff   151 Jan 29 14:26 non-blocking-read-file.js
-rw-r--r--  1 gabor  staff    18 Jan 31 08:24 process_exit.js
-rw-r--r--  1 gabor  staff    27 Jan 29 14:54 raw_command_line_arguments.js
-rw-r--r--  1 gabor  staff   324 Jan 31 15:26 read_dir.js
-rw-r--r--  1 gabor  staff  1382 Jan 31 10:45 stats.js
</code>

Количество выведенных строк совпадает с количеством файлов (мы их печатали в том же порядке, как и вызывали <hl>fs.stat()</hl>),
но по какой-то причине содержимое переменной <hl>file</hl> было одно и то же для каждого коллбека.
Это случилось потому, что переменная <hl>file</hl> это просто глобальная переменая (с точки зрения коллбека), и в первый раз, когда
коллбек был вызван, переменная <hl>file</hl> содержала уже имя последнего файла в директории.

Таким образом, если мы хотим сочетать имя файла и результат вызова функции <hl>fs.stat()</hl>, тогда мы должны опираться на порядок вызовов.
Но можем ли мы полагаться на него?
В этом конкретном случае вызова функции для каждого файла в директории это могло бы сработать как мы ожидаем - вызов функций по порядку.
Но в случае более сложных операций, особенно, если есть еще и внутренние коллбеки, мы не можем полагаться на то, что функции будут вызваны
в нужном нам порядке - в порядке их инициализации.

Следовательно, нам нужен способ передачи параметра <hl>file</hl> во внутренний коллбек.

<h2>Генерация коллбеков</h2>

В этот раз, вместо добавления жестко заданного коллбека, мы будем вызывать функцию <hl>generate_callback()</hl>, которая будет генерировать
для нас коллбеки.

Теперь каждый раз, когда мы вызываем <hl>fs.stat()</hl>, до того как <hl>fs.stat()</hl> будет реально выполнен,
JavaScript будет вызывать функцию <hl>generate_callback()</hl> с текущим значением переменной <hl>file</hl>.
<hl>Generate_callback</hl> будет создавать новую функцию и затем возвращать ее нам.
Эта вновь созданная функция станет коллбеком для метода <hl>fs.stat()</hl>.

<include file="examples/node/list_dir_generate.js">

Результат:

<code>
$ node examples/node/list_dir_generate.js ~/work/code-maven.com/examples/
Start: /Users/gabor/work/code-maven.com/examples//blocking-read-file.js
Start: /Users/gabor/work/code-maven.com/examples//node_hello_world.js
Start: /Users/gabor/work/code-maven.com/examples//node_hello_world_port.js
Start: /Users/gabor/work/code-maven.com/examples//non-blocking-read-file.js
Start: /Users/gabor/work/code-maven.com/examples//process_exit.js
Start: /Users/gabor/work/code-maven.com/examples//raw_command_line_arguments.js
Start: /Users/gabor/work/code-maven.com/examples//read_dir.js
Start: /Users/gabor/work/code-maven.com/examples//stats.js

/Users/gabor/work/code-maven.com/examples//blocking-read-file.js
97
/Users/gabor/work/code-maven.com/examples//node_hello_world.js
243
/Users/gabor/work/code-maven.com/examples//node_hello_world_port.js
270
/Users/gabor/work/code-maven.com/examples//non-blocking-read-file.js
151
/Users/gabor/work/code-maven.com/examples//process_exit.js
18
/Users/gabor/work/code-maven.com/examples//raw_command_line_arguments.js
27
/Users/gabor/work/code-maven.com/examples//read_dir.js
324
/Users/gabor/work/code-maven.com/examples//stats.js
1382
</code>

Теперь переменная <hl>file</hl> содержит имя файла, которое было у нее на момент инициализации функции, когда <hl>fs.stat()</hl> приняла ее
в качестве аргумента.

<h2>Безимянные генераторы функций</h2>

В заключение давайте посмотрим решение без использования внешней функции <hl>generate_callback</hl>.

Функция все еще здесь, но у нее просто нет имени. Вместо отдельного объявления мы ее включили в <hl>fs.stat()</hl>.
Я не уверен, нравится ли мне это или вариант более длинный. Возможно, с функцией <hl>generate_callback</hl> получается более читаемо.

<include file="examples/node/list_dir_noname.js">
