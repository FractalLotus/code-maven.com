=title Голосовалка на Flask
=timestamp 2015-08-29T17:37:01
=indexes render_template, request
=status show
=books flask, python
=author szabgab
=original a-polling-station-with-flask
=translator name2rnd
=archive 1
=comments_disqus_enable 0

=abstract start

В этой серии статей мы будем делать приложение для запуска голосований и, может быть, даже опросов с использованием Flask.

Дополнительно к этой статье, вы можете следить за развитием приложения в <a href="https://github.com/szabgab/flask-poll">этом</a> репозитории.

Давайте начнем с создания простого Flask-based приложения.

=abstract end

Мы создали новую директорию и в ней создали такой скрипт на Python:

<include file="examples/flask/poll1/poll.py">

Мы создали обработчик для <hl>/</hl>, который вызывает функцию <hl>root()</hl>.
Эта функция возвращает страницу, собранную из шаблона <hl>poll.html</hl>. Сам шаблон находится в поддиректории <hl>templates/</hl>.

<include file="examples/flask/poll1/templates/poll.html">

Сейчас директория нашего проекта выглядит вот так:

<code>
$ tree
.
├── poll.py
└── templates
    └── poll.html
</code>

Теперь мы можем запустить приложение командой <hl>python poll.py</hl>, которая скажет нам:

<code>
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
</code>

Если открыть браузер по полученному адресу, то мы увидим следующее:

<img src="/img/flask_poll_1.png" alt="Flask poll" />

Немного, но оно работает. Прям как <a href="/hello-world-with-flask-and-python">hello world</a>, но с шаблоном.

<code>
$ git init
$ git add .
$ git commit -m "step 1 - hello world with a template"
</code>

<a href="https://github.com/szabgab/flask-poll/commit/c78124201aeb49a2853cac6dc9d28fc1ee03edb3">commit</a>.

<h2>Отображение голосования</h2>

Чтобы провести голосование, нам нужен вопрос и варианты ответа для выбора.
Возможно, позже это все будет перемещено в конфигурационный файл, но сейчас давайте просто создадим словарь с данными
в нашем приложении.

<code lang="python">
poll_data = {
   'question' : 'Which web framework do you use?',
   'fields'   : ['Flask', 'Django', 'TurboGears', 'web2py', 'pylonsproject']
}
</code>

Мы также изменили вызов рендеринга шаблона <hl>render_template</hl> и теперь
передаем туда наш словарь под ключом <hl>data</hl>.

<include file="examples/flask/poll2/poll.py">

В шаблоне мы используем выражение <hl>{{ data.question }}</hl>, чтобы добавить вопрос.
Мы используем эту конструкцию для двух случаев: заголовка нашей страницы, который вы видите во вкладке браузера,
и в качестве элемента <hl>h1</hl>.

Затем мы создаем форму с <hl>action="/poll"></hl>, это значит, что мы должны создать новый обработчик для этого
запроса в нашем приложении.
Внутри формы мы создаем несколько элементов <hl>radio</hl> для ввода данных (выбора значений).
По одному для каждого варианта ответа. Тип поля radio хорошо подходит, когда нам нужно получить 
ровно один ответ.

<include file="examples/flask/poll2/templates/poll.html">

После всех этих изменений зайдем на нашу страницу, и вот что мы увидим:

<img src="/img/flask_poll_2.png" alt="Flask poll" />

Если выбрать один из элементов и нажать кнопку "Vote", то получим такой ответ:

<img src="/img/flask_poll_2_2.png" alt="Flask poll" />

Это значит, что мы еще не добавили обработчик для <hl>/poll</hl>. Давайте сделаем его.

<code>
$ git add .
$ git commit -m "add poll data and display it"
</code>

<a href="https://github.com/szabgab/flask-poll/commit/2a293a4051bc4ba3ae4c8b95dd1e02b669a76b82">commit</a>

<h2>Принимаем результаты голосования</h2>

Первый шаг это добавление хендлера для обработки <hl>/poll</hl>, прием значения поля <hl>field</hl> формы с помощью
<hl>request.args.get('field')</hl>. Для начала, просто вернем выбранное значение пользователю:

<code lang="python">
@app.route('/poll')
def poll():
    vote = request.args.get('field')
    return vote 
</code>

Мы можем перезагрузить страницу в браузере и увидим там выбранный нами вариант:

<img src="/img/flask_poll_3_1.png" alt="Flask poll" />

Следующий шаг - сохранение результатов. Для простоты мы будем использовать обычный файл.
В начале скрипта <hl>poll.py</hl> мы добавим имя файла в виде переменной:
</hl>filename = 'data.txt'</hl> (всегда хорошо иметь переменные для таких случаев),
а затем открываем файл, чтобы добавить туда контент (используя <hl>'a'</hl> в качестве аргумента для функции <hl>open</hl>),
записываем результат в файл и закрываем файл.

Мы собираемся хранить по одному результату голосований в строке. Тогда будет легко собирать данные впоследствии.

<code lang="python">
@app.route('/poll')
def poll():
    vote = request.args.get('field')

    out = open(filename, 'a')
    out.write( vote + '\n' )
    out.close()

    return vote 
</code>

Теперь, если мы обновим веб-страницу, наш выбранный вариант сохранится в файл данных, но мы все еще получаем обратно выбранный вариант.
Вместо этого, давайте добавим более дружественную страницу благодарности:

<code lang="python">
    return render_template('thankyou.html', data=poll_data)
</code>

Теперь Flask скрипт выглядит вот так:

<include file="examples/flask/poll3/poll.py">

Шаблон страницы благодарности вот такой:

<include file="examples/flask/poll3/templates/thankyou.html">

<code>
$ git add poll.py templates/thankyou.html
$ git commit -m "save the vote and thank the voter"
</code>

<a href="https://github.com/szabgab/flask-poll/commit/ba5a516c7e1506d7c25807ebd18e9ef388df2b9b">commit</a>

Эта версия голосовалки уже работает, но давайте добавим еще одну страницу - с результатами голосования.

<h2>Отображение результатов</h2>

Для отображения результатов мы создадим еще один обработчик (для пути с именем <hl>/results</hl>), который будет читать файл с данными
и показывать количество голосов по каждому варианту.

Вот наш обработчик:

<code lang="python">
@app.route('/results')
def show_results():
    votes = {}
    for f in poll_data['fields']:
        votes[f] = 0

    f  = open(filename, 'r')
    for line in f:
        vote = line.rstrip("\n")
        votes[vote] += 1

    return render_template('results.html', data=poll_data, votes=votes)
</code>

Сначала мы создали словарь <hl>votes</hl>, куда собираемся собрать количество голосов.
Затем мы идем по списку ожидаемых значений из исходного списка значений и создаем там элементы для каждого из них с количеством 0.
Это будет гарантией, что каждый элемент из нашего списка вариантов представлен в результатах, 
даже есть за него никто не проголосовал.

Затем мы открываем файл с данными для чтения и читаем построчно. Перед обновлением нашего словаря <hl>votes</hl>, 
мы должны удалить символы перевода строки с помощью <hl>line.rstrip("\n")</hl>.

Затем мы передаем собранные результаты голосований в функцию <hl>render_template</hl>.

Шаблон выглядит вот так:

<include file="examples/flask/poll4/templates/results.html">

и вот скрипт целиком:

<include file="examples/flask/poll4/poll.py">

Если мы перейдем по ссылке http://127.0.0.1:5000/results, то увидим такой ответ:

<img src="/img/flask_poll_4.png" alt="Flask poll" />

<code>
$ git add poll.py templates/results.html
$ git commit -m "show the results"
</code>

<a href="https://github.com/szabgab/flask-poll/commit/9c0f04d7c7d80da68c681dfec2c0f7ad4f4d605a">commit</a>

<h2>Что дальше?</h2>

<a href="/testing-the-flask-poll">Тестирование голосовалки на Flask</a>.

