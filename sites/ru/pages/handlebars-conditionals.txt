=title Условия в Handlebars
=timestamp 2015-05-11T09:52:01
=indexes Handlebars.registerHelper, if_eq, comparison, iff
=status show
=books javascript, handlebars
=original handlebars-conditionals
=author szabgab
=translator name2rnd
=archive 1
=comments_disqus_enable 0

=abstract start

Шаблонизатор <a href="http://handlebarsjs.com/">Handlebars</a> для JavaScript предоставляет условный оператор <hl>if</hl> (так же возможно использование и <hl>else</hl>),
но оператор <hl>if</hl> может обрабатывать только единственное значение (не выражение). Вы можете написать

<code>
{{#if name}}
..
{{/if}}
</code>

но не можете написать

<code>
{{#if name == 'Foo'}}
..
{{/if}}
</code>

Давайте создадим хелпер (обработчик) для <a href="/handlebars-helpers">Handlebars</a>, который будет предоставлять такую функциональность.

=abstract end

<h2>Условие if</h2>

Но перед тем, как создавать хелпер, давайте посмотрим на полноценный пример с использованием оператора <hl>if</hl>.
В объекте есть два значения: cond1 и cond2, true и false соответственно. Остальная часть кода это просто получение шаблона 
и обработка данных в Handlebars.

<include file="examples/js/handlebars_if.js">

Шаблон имеет два фрагмента типа этого, каждый из которых используется для своей переменной.

<code>
{{#if cond1}}
    true
{{else}}
    false
{{/if}}
</code>

Полный html код такой:

<try file="examples/js/handlebars_if.html">

Вы можете посмотреть его работу, нажав на ссылку "Try" (откроется в новом окне). Кнопка "show" запускает обработку.

<h2>if_eq</h2>

В следующем примере мы реализуем <a href="/handlebars-helpers">хелпер Handlebars</a> с именем 
<hl>if_eq</hl>. Он ожидает два параметра и будет сравнивать их с помощью <hl>==</hl>.
Хелпер выглядит вот так:

<code lang="javascript">
Handlebars.registerHelper('if_eq', function(a, b, opts) {
    if (a == b) {
        return opts.fn(this);
    } else {
        return opts.inverse(this);
    }
});
</code>

Шаблон, использующий наш хелпер, выглядит вот так: (<hl>name</hl> это атрибут, передаваемый в функцию <hl>template</hl>.)

<code>
{{#if_eq name 'Foo'}}
      true
{{else}}
      false
{{/if_eq}}
</code>

Файл с JavaScript также содержит объект с данными и код, который у нас был раньше (объединяющий шаблон и данные):

<include file="examples/js/handlebars_helpers_if_eq.js">

Весь HTML, включая шаблон, выглядит так:

<try file="examples/js/handlebars_helpers_if_eq.html">

Вы можете попробовать пример, нажав на ссылку "Try".

<h2>Uncaught Error: if_eq doesn't match if - 3:7</h2>

Мне потребовалось некоторое время, чтобы понять в чем же дело, когда я увидел эту ошибку.
Возможно, что-то заблокировало мой разум, я не уверен. Сможете ли вы определить проблему в этом примере:

<try file="examples/js/handlebars_helpers_if_eq_typo.html">

Это случилось, когда я начал преобразовывать оператор <hl>if</hl> в условие <hl>if_eq</hl>, но я заменил только открывающий оператор
<hl>{{#if ...}}</hl> на <hl>{{#if_eq ...}}</hl>, но не заменил закрывающий оператор, который остался таким - <hl>{{/if}}/hl>.
Таким образом, ошибка говорит нам, что <hl>if_eq</hl> не соответствует <hl>if</hl>. Возможно, если бы ключевые слова были как-то выделены,
все было бы проще. 

В любом случае, будьте осторожны с такими опечатками. Это просто трата времени. Делайте более интересные ошибки!

<h2>iff - для других условий</h2>

Наконец, сделаем более мощный хелпер для проверки условий. Я назвал его <hl>iff</hl>. Я знаю математически смысл этого,
но название выглядит мило и коротко, чтобы быть использованным в нашем случае. Идея такова, чтобы я мог писать условия вот так: 

<code>
    {{#iff name '==' 'Foo'}}
</code>

и вот так:

<code>
    {{#iff answer '>' 40}}
</code>

В примере я сделал два шаблона. В первом шаблоне есть три таких условия.
Во втором - одно условие <hl>{{#iff 4 '*' 5}}</hl> - чтобы показать, как будет вести себя 
хелпер <hl>iff</hl>, если получит неподдерживаемый оператор. Также я добавил две кнопки - одну для 
обработки первого шаблона, и вторую - для второго шаблона.

<try file="examples/js/handlebars_conditionals.html">

В файле JavaScript лежат данные, код, реагирующий на нажатия и обрабатывающий шаблон, и частичная(!) реализация хелпера <hl>iff</hl>. 
По сути, это огромный оператор <hl>switch</hl>, обрабатывающий отдельно в <hl>case</hl> каждый из допустимых входных операторов.
Поведение по умолчанию (<hl>default</hl>), когда полученный оператор не может быть обработан одним из <hl>case</hl>, 
генерирует исключение.

<include file="examples/js/handlebars_conditionals.js">

<h2>#compare</h2>

Добравшись до этого момента, я узнал, что уже есть реализация подобного хелпера, называемая <hl>#compare</hl>.
Этот хелпер можно найти среди <a href="http://assemble.io/helpers/helpers-comparison.html">хелперов сравнения</a>.

В любом случае, я думаю, что было интересно узнать, как такое можно сделать и использовать.
