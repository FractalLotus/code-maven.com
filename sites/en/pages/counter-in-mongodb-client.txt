=title Counter in MongoDB client
=timestamp 2015-09-25T10:30:01
=indexes MongoDB, insert, find, update, _id, $inc, findAndModify, upsert
=status show
=books mongodb
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

In the <a href="/counter">big counter example</a> mostly we use programming languages, but this time I am going to use the MongoDB client
to implement a counter. Later we can use this example to build counters using some programming language and MongoDB as the storage facility.

=abstract end

Launch the MongoDB client and connect to MongoDB server:

<code>
$ mongo
</code>

Switch to a database: (We call it <hl>test</hl>)

<code>
> use test
</code>


List the existing collections (there are none):

<code>
> show collections
system.indexes  0.000MB / 0.000MB
</code>


Alternatively, list all the entries in the <hl>counter</hl> collection: (there are none):

<code>
> db.counter.find()
Fetched 0 record(s) in 0ms
</code>

<h2>Insert a counter</h2>

Insert a document where we decide the <hl>_id</hl>, this is going to be the key of the counter,
and it has aanother field called 'val' that is set to the initial value of 1.


<code>
> db.counter.insert({ '_id' : 'a', 'val' : 1 })
Inserted 1 record(s) in 9ms
WriteResult({
  "nInserted": 1
})
</code>

<h2>Retreive a document</h2>

We can retreive the counter by specifying its name:

<code>
> db.counter.find( { '_id' : 'a' })
{
  "_id": "a",
  "val": 1
}
Fetched 1 record(s) in 1ms
</code>


<h2>Increment the counter</h2>

<code>
> db.counter.update({ '_id' : 'a'}, {'$inc' : { 'val' : 1 } })
Updated 1 existing record(s) in 3ms
WriteResult({
  "nMatched": 1,
  "nUpserted": 0,
  "nModified": 1
})
</code>

and retreive the new value:

<code>
> db.counter.find( { '_id' : 'a' })
{
  "_id": "a",
  "val": 2
}
</code>


<h2>Insert another counter</h2>

<code>
> db.counter.insert({ '_id' : 'b', 'val' : 1 })
</code>

Increment both of them separately:

<code>
> db.counter.update({ '_id' : 'a'}, {'$inc' : { 'val' : 1 } })
> db.counter.update({ '_id' : 'a'}, {'$inc' : { 'val' : 1 } })
> db.counter.update({ '_id' : 'a'}, {'$inc' : { 'val' : 1 } })
> db.counter.update({ '_id' : 'b'}, {'$inc' : { 'val' : 1 } })
</code>


<h2>Retreive the individual counters</h2>

<code>
> db.counter.find( { '_id' : 'a' })
{
  "_id": "a",
  "val": 5
}
Fetched 1 record(s) in 1ms
</code>

<code>
> db.counter.find( { '_id' : 'b' })
{
  "_id": "b",
  "val": 2
}
Fetched 1 record(s) in 0ms
</code>


<h2>Retreive all the counters</h2>


<code>
> db.counter.find()
{
  "_id": "a",
  "val": 5
}
{
  "_id": "b",
  "val": 2
}
Fetched 2 record(s) in 1ms
</code>

<h2>findAndModify and upsert</h2>

An even better solution is to use the <hl>findAndModify</hl> function call, and even include an
<hl>upsert</hl> field to make sure the docuemnt is created if it does not exist.

<code>
> db.counter.findAndModify({ query: { '_id' : 'y' }, update : { '$inc' : { val : 1 } }, new: true, upsert: true })
{
  "_id": "y",
  "val": 1
}
</code>





