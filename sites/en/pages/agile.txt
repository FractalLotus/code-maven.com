=title Agile practices
=timestamp 2017-01-01T07:30:01
=indexes Agile
=status draft
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start
=abstract end

What we get is shorter development time, better accuracy in estimations, less bugs.
Peace of mind for both developers and managers.


<ul>
   <li>unit testing</li>
   <li>continuous integration</li>
   <li>coding standards  (including the use of linter)</li>
   <li>refactoring</li>
   <li>Test-Driven development</li>
   <li>Automated Acceptance testing</li>
   <li>Automation (usually means CI or something similar)</li>
   <li>Continuous Deployment</li>
   <li><a href="/pair-programming">Pair programming</a></li>
   <li>Frequent commits</li>
   <li>Frequent code-review</li>
   <li>collective code ownership</li>
   <li>Behavior-driven development</li>
   <li>Sustainable pace</li>
</ul>

<h2>Books</h2>
<ul>
    <li><a href="https://martinfowler.com/books/refactoring.html">Refactoring</a> by Martin Fowler</li>
    <li><a href="https://www.amazon.com/dp/0131177052/">Working Effectively with Legacy Code</a> by  Michael Feathers</li>
    <li><a href="https://www.amazon.com/Rapid-Development-Taming-Software-Schedules/dp/1556159005">Rapid Development: Taming Wild Software Schedules</a> by <a href="http://stevemcconnell.com/books/">Steve McConnell</a></li>
</ul>

<h2>Articles</h2>

<ul>
    <li><a href="http://www.netobjectives.com/system/files/WorkingEffectivelyWithLegacyCode.pdf">Working Effectively with Legacy Code</a> (short pdf)</li>
    <li><a href="https://www.mountaingoatsoftware.com/articles/introducing-an-agile-process-to-an-organization">Introducing An Agile Process to an Organization</a></li>
    <li><a href="http://stateofagile.versionone.com/">State of Agile</a></li>
    <li><a href="https://explore.versionone.com/state-of-agile/versionone-11th-annual-state-of-agile-report-2">State of Agile 2017</a></li>
    <li><a href="https://builttoadapt.io/whats-the-value-of-ci-cd-c2e6c39450bd">What's the Value of CI/CD?</a></li>
</ul>

<h2>Counter points</h2>

<ul>
    <li>Clean-up is invisible to users, we need to add new features.
        <ul>
            <li>Bugs are visible. Especially bugs that return.</li>
            <li>Security issue are even worse.</li>
            <li>Clean-up will help us go faster.</li>
        </ul>
    </li>
    <li>We don't have time for clean-up.
        <ul>
            <li>Prevention a lot cheaper than cure. Both in terms of money, time, and bugs.</li>
        </ul>
    </li>
</ul>

<h2>Steps</h2>

<ul>
    <li>Introduce (unit)testing.
        <ul>
            <li>Introduce the practice with low-hanging fruits even if they don't provide a lot of value. Get the CI going!</li>
            <li>Increase the modularity of the code.</li>
            <li>Increase the testability of the code.</li>
            <li>Use mocking in the meantime.</li>
        </ul>
    </li>
</ul>

<h2>Tools</h2>

<ul>
   <li><a href="https://www.mikogo.com/">Mikogo</a> for remote screen sharing</li>
</ul>

