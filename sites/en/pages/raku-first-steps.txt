=title First impression with Raku
=timestamp 2020-08-22T22:00:01
=indexes Raku, Rakudo, Docker, dir, shell
=status show
=books raku
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

I think it is time I take a fresh look at <a href="https://www.raku.org/">Raku</a>.

I have some background with the language from several years ago, but I am sure it changed since then and in any case I'll try to newly explore it.


=abstract end

<h2>Using Docker</h2>

I know Raku is rather new an I did not want to bother with installations, so I though I'll go the modern way and use <a href="/docker">Docker</a>.
For this to work first you need to <a href="https://www.docker.com/get-started">Download Docker Desktop</a>.

Then I can run the following:

<code>
$ docker run --rm -it rakudo-star
</code>

This will download (for the first time when I run this) the rakudo-star image and then run it. The <hl>--rm</hl> tells Docker to
remove the container once I am done with it. <hl>-it</hl> means to enter interactive mode.

<h2>Interactive Hello World</h2>

The interactive mode immediately lands us inside the Raku interactive shell (aka. REPL) using a single greater-than sign as the prompt.
There I can type in:

<code>
> say "Hello World!"
</code>

and also

<code>
> "Hello World!".say
</code>

They both work.

Actually, because it is an interactive shell, it is enough to type in the string:

<code>
> "Hello World!"
</code>

<h2>dir</h2>

I was not sure what to do next so I fell back to my Python background and typed <code>dir</code>. (OK, I know that here I don't have to type in the parentheses for the function call to work.)

Actually I was surprised by the result:

<code>
> dir
("mnt".IO "bin".IO "proc".IO "sbin".IO "tmp".IO "usr".IO "media".IO "lib".IO "opt".IO "srv".IO "lib64".IO "etc".IO "root".IO "home".IO "var".IO "sys".IO "dev".IO "boot".IO "run".IO ".dockerenv".IO)
</code>

This is the content of the root directory of the Docker container.

<h2>shell</h2>

I am not sure what was I thinking but then I also tried to call <hl>shell</hl> and it worked!

<code>
shell("ls -l")
</code>

<h2>help</h2>

At this point I ran out ideas so I tried typing in <hl>help</hl>

<code>
===SORRY!=== Error while compiling:
Undeclared routine:
    help used at line 1
</code>

I guess there is no excuse. I'll have to find a tutorial and some documentation.

<h2>Version</h2>

Then I quite the interactive shell by typing <hl>exit</hl>.

<code>
$ docker run --rm rakudo-star raku -v
This is Rakudo version 2020.01 built on MoarVM version 2020.01.1
implementing Perl 6.d.
</code>

Hmm, that seems to be a bit old. I was under the impression that Rakudo Star is released every 3 months. I guess I was mistaken.

<h2>Hello World on the command line</h2>

<code>
$ docker run --rm rakudo-star raku -e 'say "Hello World!"'
</code>

<h2>Hello World in a file</h2>

I've created a file called <b>hello_world.raku</b>:

<include file="examples/raku/hello_world.raku">

Then ran it as:

<code>
docker run --rm -v $(pwd):/opt rakudo-star raku /opt/hello_world.raku
</code>

The <hl>-v $(pwd):/opt</hl> parameter tells Docker to map the current directory on my own computer
to the <hl>/opt</hl> directory inside the Docker image. Then on the command line I passed in

<code>
raku /opt/hello_world.raku
</code>

That will execute the given file and I got:

<code>
Hello World
Hello Raku
</code>

Great, so things are working quite smoothly. It is time to dig out my old course material and see what still works and
what I need to improve.

If you are interested in Docker I have a <a href="/docker">Docker course</a>

