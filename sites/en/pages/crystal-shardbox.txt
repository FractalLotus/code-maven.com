=title Live Crystal Shardbox development with Johannes Müller (straight-shoota)
=timestamp 2021-06-23T21:30:01
=indexes Crystal, Shardbox
=tags screencast
=status show
=books crystal
=author szabgab
=archive 1
=comments_disqus_enable 0
=show_related 1

=abstract start

Live <a href="https://crystal-lang.org/">Crystal</a> <a href="https://shardbox.org/">Shardbox</a> development with
<a href="https://www.linkedin.com/in/johannes-m%C3%BCller-b4929786/">Johannes Müller</a> (<a href="https://github.com/straight-shoota">straight-shoota</a>)

The resulting <a href="https://github.com/shardbox/shardbox-web/pull/9">Pull Request</a>

=abstract end

<screencast file="crystal-shardbox-with-johannes-muller-2021-06-23.mp4" youtube="hlC88df4qqM" />

<ul>
    <li><a href="https://youtu.be/hlC88df4qqM?t=0">0:00 Welcome, a bit of background.</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=70">1:10 Johannes introduces himself.</a> he works at <a href="https://manas.tech/">Manas Tech</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=210">3:30 Gabor introduces himself.</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=360">6:00 Gabor is trying to explain what does Shardbox do.</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=840">14:00 Explaining the Shardbox catalog.</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=1255">20:55 Explaining the Shardbox core.</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=1320">22:00 Schema overview</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=2370">39:30 Explaining about the code of Shardbox core</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=2905">48:25 Setting up the development environment - PostgreSQL in Docker</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=3590">58:50 Install Crystal dependencies for the Shardbox core (till 1:14:30)</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=4580">1:16:20 Build the worker</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=4960">1:22:40 Start setting up the Shardbox web application</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=5355">1:29:15 We have Shardbox running on my computer!</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=5630">1:33:50 Change the Jinja templates to add links to the licenses</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=5805">1:36:45 Change the search route to accept the new parameter</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=7020">1:57:00 Showing the query on the search result page</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=7380">2:03:00 Commit the changes, send pull-request.</a></li>
    <li><a href="https://youtu.be/hlC88df4qqM?t=7750">2:09:10 Plans for Shardbox</a></li>
</ul>



Schema overview is in this file: db/schema-overview.svg in the <a href="https://github.com/shardbox/shardbox-core">shardbox-core repository</a>.

The <b>catalog</b> directory in the <a href="https://github.com/shardbox/catalog">catalog</a> repository contains the manually mapped shards.

<h2>PostgreSQL in Docker</h2>

Start running the Docker container:

<code>
docker run -v$(pwd):/opt --name shardbox -e POSTGRES_PASSWORD=Secret -d postgres
</code>

Connect to the container:

<code>
docker exec -it shardbox bash
</code>

In the container:

<code>
cd /opt
apt-get update
apt-get install make
PGUSER=postgres TEST_DATABASE_URL=postgres://postgres:Secret@localhost/shardbox_test make test_db
</code>

At the end of the session working on sharbox you can stop the container:

<code>
docker stop shardbox
</code>

Packages we had to install (on the Ubuntu host)

<code>
sudo apt-get install libsass-dev
sudo apt-get install postgresql-client
sudo apt-get install libgit2-dev
</code>

Get the IP address of the Docker container:

<code>
docker inspect shardbox
</code>

Use that IP address in the following commands:

We checked if we can access the database using psql:

<code>
psql postgres://postgres:Secret@172.17.0.2/shardbox_test
</code>

Running the tests of shardbox-core:

<code>
export TEST_DATABASE_URL=postgres://postgres:Secret@172.17.0.2/shardbox_test
export SHARDS_OPTS=--ignore-crystal-version
# make test # this did not work
crystal spec
</code>


Build the worker

<code>
make build
</code>

Setting up for development database:

<code>
export DATABASE_URL=postgres://postgres:Secret@172.17.0.2/shardbox_test
</code>

Create a <a href="https://github.com/settings/tokens">Personal access token</a> with a name that you can easily recognize, e.g. "Shardbox Development Token" using the following rights:

<code>
repo
   x public_repo

user
   x read:user
   x user:email
</code>

<code>
export GITHUB_TOKEN=...
./bin/worker
./bin/worker import_catalog ../shardbox-catalog/catalog/
</code>

Importing the whole catalog can take a lot of time so we copied a single file from the catalog
and ran on it. I would think a flag to limit the number of shards to be imported would help here.

<code>
mkdir catalog/
cp ../shardbox-catalog/catalog/Web_Servers.yml catalog/
./bin/worker import_catalog catalog/
</code>

One can also update the metrics:

<code>
./bin/worker update_metrics
</code>


<h2>Building the web applicaton in shardbox-web</h2>

<code>
SHARDS_OPTS=--ignore-crystal-version make build
</code>

Only the web application:

<code>
SHARDS_OPTS=--ignore-crystal-version make bin/app
</code>

Run the web application

<code>
./bin/app
</code>

Format the source code:

<code>
crystal tool format
</code>


<!--
Scheduled for <span id="localdate" x-schedule="2021-06-23T16:00:00+03:00"></span>

<a class="btn btn-lg btn-success" href="https://us02web.zoom.us/meeting/register/tZEuceuprT8iGNLbQHGEeE10-rDF0HNSh-pJ">Register here</a>

Check out all the other <a href="https://code-maven.com/live">live</a> events and the calendar where you'll be able to see the time given in your time-zone.
-->


