=title Build docker image with buildah
=timestamp 2020-11-23T07:30:01
=indexes Buildah, Docker
=description Buildah makes it easier to build a Docker image.
=status show
=books docker
=author szabgab
=archive 1
=comments_disqus_enable 0
=show_related 1

=abstract start

Creating a Docker image using <a href="https://buildah.io/">Buildah</a>

We are going to go over a script that was taken from the <a href="https://gitlab.com/ioanrogers/perl-builder">Perl builder project</a>
of <a href="https://www.linkedin.com/in/ioanrogers/">Ioan Rogers</a> and that you can find at the bottom of this page.

While some of the commands are Perl specific, they only deal with the installation of Perl-based packages.
You can easily replace them with similar commands installing the packages of the project you work on.

=abstract end

<img src="/img/buildah.png" alt="Buildah logo" />

First of all you need to <a href="https://github.com/containers/buildah/blob/master/install.md">install buildah</a>.

I was lucky as Ubuntu has it in it a single command away.


<h2>Download a Docker image</h2>

Download a Docker image from <a href="https://hub.docker.com/">Docker Hub</a> if necessary, create a container and echo the name of the container.
If we run this again, it will create a new container and echo the name of that one.

When I ran this command I got a container called <b>perl-working-container</b>.

Running it a second time gave me <b>perl-working-container-1</b>.

The script, at the bottom calls this only once and assigns the output to a variable called <b>ctr</b>. (It probably stands for container.)

<code>
buildah from docker.io/perl:5.30
</cide>

<h2>List containers</h2>

<code>
buildah containers
</code>

<h2>Remove container</h2>

The following command helped me get rid of the extra container.

<code>
buildah rm perl-working-container-1
</code>

<h2>List images</h2>

I used the following command to list all the images. Apparently the list of Docker images is handled separately by Buildah
as the regular <hl>docker images</hl> did not list the one I got using <hl>buildah images</hl>.

<code>
buildah images
</code>

<h2>Configure Buildah Docker</h2>


The config command allows setting a number of configuration options such as the author of the image, what is the working directory,
and an environment variable.

<code>
buildah config
</code>

<h2>Buildah Run</h2>

Then there is a Bash function definition of a function called <b>brun</b> that probably stands for <b>buildah run</b>
that will execute the run command of buildah, which seems to be analogous to the <b>RUN</b> command of Dockerfiles,
with the name of the container and with various additional parameters.

<code>
function brun() {
  buildah run $ctr -- "$@"
}
</code>

Then come the various calls to <hl>brun</hl>

<code>
brun cpanm App::cpm
</code>

<a href="https://metacpan.org/release/App-cpanminus">cpanm</a> is the package installer of Perl (similar to pip for python or npm for NodeJS) and
this command installs the distribution that supplies the <a href="https://metacpan.org/release/App-cpm">App::cpm</a> module which is another package
installer for Perl.

Then using this the new <hl>cpm</hl> command we install a number of other Perl modules from <a href="https://metacpan.org/">CPAN</a>.

Then we clean the caches of apt, the Debian/Ubuntu package manager:

<code>
brun apt-get clean
</code>

and remove the caches of the two Perl package managers so they won't take up space in the new Docker image.

<code>
brun rm -rf /root/.cpanm /root/.perl-cpm
</code>

<h2>buildah commit</h2>

The last command in the script bakes the whole thing together into a Docker image using the image name and tag that were set up at the beginning of the shell script.

<code>
buildah commit --rm $ctr "$image:$tag"
</code>

<h2>The original script</h2>

<include file="examples/perl-builder/build.sh">

