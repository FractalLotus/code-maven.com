=title jq
=timestamp 2018-11-11T11:12:13
=indexes jq, json
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

<a href="https://stedolan.github.io/jq/">jq</a> is the swiss army knife for dealing with JSON files.

Alternatively, you can write your own <a href="/json-beautifier">JSON beautifier</a> in one line of your facorite languge.

=abstract end

<h2>Fetching a JSON file</h2>

Fetching a JSON file is the job of <hl>curl</hl> or similar tools. Here is an example how you might do it:

<code>
curl -X GET -H "Content-Type: application/json" -H "Authorization: Bearer $DO_API_TOKEN" "https://api.digitalocean.com/v2/images?type=distribution" > images.json
</code>

A few <hl>jq</hl> command that can be used for that file.

<code>
jq keys images.json

jq .images[].slug images.json

jq .links images.json  | jq keys

jq .images images.json  | jq keys      are all numbers
</code>


<h2>A sample JSON file</h2>

<include file="examples/data/in.json">

Print the whole content of the JSON file in a readable way:

<code>
jq . in.json
</code>

Print the top-level keys of the file:

<code>
jq keys in.json

[
  "abstract",
  "author",
  "generated_by",
  "meta-spec",
  "name",
  "no_index",
  "prereqs"
]
</code>

<b>The value of a key<b>

The name after the dot.

<code>
jq .abstract examples/data/in.json
jq .prereqs examples/data/in.json

jq .prereqs.runtime.requires examples/data/in.json
{
  "Code::Explain": "0.02",
  "App::Ack": "0",
  "Archive::Any": "0",
  "Acme::MetaSyntactic": "1.012"
}
</code>

Element in a list

<code>
jq .no_index.directory[0] examples/data/in.json
</code>

<h2>Array as the top level item</h2>

If the top level is an array <hl>jq keys data.json</hl> will list the indexes <hl>jq .[0].name data.json</hl> will fetch the "name" field of the first element.

<h2>Generating JSON</h2>

<code>
echo '{}' | jq --arg name 'Foo Bar' --arg email 'foo@bar.com' '.name |= $name | .address |= $email'
</code>

generates this:

<code>
{
  "name": "Foo Bar",
  "address": "foo@bar.com"
}
</code>

<h2>Adding values to JSON</h2>

Given a JSON file, eg. <hl>template.json</h2> with the following content:

<code>
{
    "title": "Example"
}
</code>

We can add fields to it:

<code>
jq --arg name 'Foo Bar' --arg email 'foo@bar.com' '.name |= $name | .address |= $email' template.json 
</code>

The result will look like this:

<code>
{
  "title": "Example",
  "name": "Foo Bar",
  "address": "foo@bar.com"
}
</code>


