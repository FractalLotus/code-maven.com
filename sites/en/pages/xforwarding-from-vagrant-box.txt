=title X-forwarding to run GUI program in Vagrant box
=timestamp 2017-02-23T15:30:01
=indexes Vagrant, VirtualBox, X-Server, GUI
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

How can run a desktop GUI application inside my headless <a href="https://www.virtualbox.org/">VirtualBox</a> that was launched via
<a href="https://www.vagrantup.com/">Vagrant</a> ?

I already had an explanation on how to <a href="/setting-up-vagrant">set up Vagrant with VirtualBox</a>.
I assume you already have all that set up.

=abstract end

There is an

<h2>X-Server on the host</h2>

You need to have an X-Server on you host-machine.

If you run a desktop Linux system as your host as  well, then you already have an X Server.

On Mac OSX you can install <a href="https://www.xquartz.org/">XQuartz</a>

When writing this article I have not tried it on MS Windows, but as I recall I used
<a href="https://freedesktop.org/wiki/Xming/">Xming</a> at one of my clients.

<h2>Enable X-forwarding</h2>

You need to enable X-forwarding in the guest operating system. Probably the best is to
do it via the Vagrant configuration file <hl>Vagrantfile</hl>:

<code lang="ruby">
  config.ssh.forward_x11 = true
</code>

<h2>ssh into the box</h2>

Instead of using <hl>vagrant ssh</hl> we'll need to use the <hl>ssh</hl> command to access the
guest operating system.  Run <hl>vagrant ssh-config</hl> on the host in order to find out the
configuration details.

<code>
$ vagrant ssh-config

Host default
  HostName 127.0.0.1
  User ubuntu
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /Users/gabor/work/.vagrant/private_key
  IdentitiesOnly yes
  LogLevel FATAL
  ForwardX11 yes
</code>

From this we can get the <b>User</b>, the <b>HostName</b>, the <b>Port</b>, and the location of the <b>IdentityFile</b>
that holds the private key we need to use.

In addition we need to supply the <hl>-X</hl> flag that tells ssh to use the X-forwarding.

<code>
ssh ubuntu@127.0.0.1 -p 2222 -i /Users/gabor/work/.vagrant/private_key -X
</code>

Then you can already start desktop GUI applications.


Traditionally <hl>xclock</hl> and <hl>xeyes</hl> were used to test this as they are really simple X-based
applications, but if you cannot install either of those, you might have something like <hl>xarclock</hl>.

Once you know you can launch x applications in the guest and see them on the host, I recommend creating
and alias for the command by adding this to your <hl>~/.bashrc</hl> or <hl>~/.bash_profile</hl> in your
host. (Assuming Linux or OSX)

<code>
alias vssh='ssh ubuntu@127.0.0.1 -p 2222 -i /Users/gabor/work/.vagrant/private_key -X'
</code>

and the reloading it using <hl>source</hl>.

That way the connection will be just a <hl>vssh</hl> away.

