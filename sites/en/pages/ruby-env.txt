=title Ruby ENV - access the environment variables
=timestamp 2015-11-18T15:50:01
=indexes ENV, system
=status show
=books ruby
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

Ruby maintaines a hash called <a href="http://ruby-doc.org/core-2.1.4/ENV.html">ENV</a> that gives us access to the
envrionment variables such as PATH or HOME.

=abstract end

We can see them all using <a href="/display-complex-data-structure-in-ruby">pp, the pretty printer of Ruby</a>.

<include file="examples/ruby/env.rb">

We can also access the value directly. For example: <hl>puts ENV['PATH']</hl>, we can add new environment variables or change existing ones with
one big caveat. Once our Ruby program ends these changes will be gone.

If we start a new process from our Ruby program after we have made modifications <hl>ENV</hl>, all those modifications
will be seen by the other process.  However the changes cannot propagate to the process that launched our Ruby program:

For example if run this program:

<include file="examples/ruby/change_path_and_system.rb">

The output will look something like this:

<code>
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
/nothing/here
</code>

The first time we called <hl>system</hl> the new shell saw the original content of the <hl>PATH</hl> environment variable.
Then we changed it and set it to something horribly bad.
When we called <hl>system</hl> the second time the new shell saw the new value.

After tunning the above script execute the following in the Unix/Linux shell

<code>
echo $PATH
</code>

It will print the same path as it did with the first call to <hl>system</hl>.

<code>
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
</code>

This means our changes in the Ruby code have not changed the environment variable for the parent process.

This is a feature of most or all of the Operating Systems.
