=title Logging in AngularJS applications
=timestamp 2016-10-30T07:30:01
=indexes $log, console.log, $logProvider
=status show
=books angularjs
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

We have already seen <a href="/logging-in-javascript">how to log in plain JavaScript</a>,
and even dealt with <a href=/logging-javascript-objects">logging JavaScript objects</a>,
but what if we are using <a href="/angularjs">AngularJS</a>?

=abstract end

<h2>$log in AngularJS</h2>

AngularJS comes with a service called <a href="https://docs.angularjs.org/api/ng/service/$log">$log</a> that
is a simple wrapper around the <hl>console.log</hl> facilities.

In this example we can see that in order to use the <hl>$log</hl> service we need to use the
<hl>dependency injection</hl> of AngularJS <hl>['$log', function($log)</hl> passing the <hl>$log</hl>
object to the function implementing the controller where we would like to use it.

We see both calls to 5 <hl>$log.*</hl> methods and to the corresponding <hl>console.*</hl> methods.

<include file="examples/angular/logging.js">

The results looks like this in Chrome:

<img src="/img/angular_logging_chrome.png" alt="Logging in AngularJS" />

As you can see the results of the corresponding logging functions look the same in AngularJS and pure JavaScript, except that the
calls to the <hl>$log.*</hl> methods don't show accurate line numbers.

That's clearly a drawback and we are going to try to fix this soon, but before that we are going to
look at the advantage of the <hl>$log</hl> facilities over the corresponding <hl>console.*</hl> functions.

In any case if you'd like to try it yourself, here is the HTML file that will load the above JavaScript file:

<try file="examples/angular/logging.html">


<h2>Turn off logging in AngularJS</h2>

The only advantage of <hl>$log.debug</hl> over <hl>console.debug</hl> I could find is
the ability to turn off the debugging printouts.

We can do that through the
<a href="https://docs.angularjs.org/api/ng/provider/$logProvider">$logProvider</a> provider
in the <hl>config</hl> directive of AngularJS by adding the following:

<code lang="javascript">
.config(['$logProvider', function($logProvider) {
    $logProvider.debugEnabled(false); // turns off the calls to $log.debug, but not the others
}])
</code>

This turns off the <hl>$log.debug</hl> calls, but as you can see in the comment, it
does not turn off the other 4 calls of <hl>$log</hl>. Our code will still print out
any of the <hl>info</hl>, <hl>log</hl>, <hl>warn</hl>, and <hl>error</hl> messages.

See the results:

<img src="/img/angular_logging_off_chrome.png" alt="Logging in AngularJS" />

As far as I know, Angular does not provide a way to turn those off.

The full JavaScript is here:

<include file="examples/angular/logging_off.js">

The corresponding HTML file is here:

<try file="examples/angular/logging_off.html">

<h2>Showing the correct line numbers</h2>

There is a way to tell AngularJS to show the correct line numbers. You just need to bind the <hl>$log.*</hl>
functions to the <hl>console.*</hl> functions. Like this:

<code lang="javascript">
    $log.debug = console.debug.bind(console);
</code>

You will have to do that for each one of the 5 methods separately. In our example we have done it for 2:

<img src="/img/angular_logging_lines_chrome.png" alt="Logging in AngularJS" />

<include file="examples/angular/logging_lines.js">

The next HTML file can help you try this in your browser.

<try file="examples/angular/logging_lines.html">


<h2>Other Solution</h2>

While searching for solutions I've bumped into the 
<a href="https://developer.chrome.com/devtools/docs/blackboxing">Blackbox JavaScript Source Files</a>, that can be used to fix
the incorrect reporting of line numbers. Unfortunately that's Chrome only.

<h2>Conclusion</h2>

As it stands I don't see any real advantage for using the logging mechanism provided by AngularJS.
I'll stick with calls to <hl>console.*</hl>.


